/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SalesSupervisorRole;

import Business.EcoSystem;
import ui.SalesPersonRole.*;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Order;
import Business.WorkQueue.Product;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author harish
 */
public class BuyProductsFromDistributorJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    
    private Enterprise distributorEnterprise;
    private Enterprise superMarketEnterprise;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;
    Order order;
    WorkRequest workRequest;
    /**
     * Creates new form SalesPersonTransactionHome
     */
    public BuyProductsFromDistributorJPanel(JPanel userProcessContainer, UserAccount account, Enterprise distributorenterprise, Enterprise superMarketEnterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.distributorEnterprise = distributorenterprise;
        this.superMarketEnterprise = superMarketEnterprise;
        this.userAccount = account;
        this.ecoSystem = ecoSystem;
        order = new Order();
        Network net = null;
        for(Network network:ecoSystem.getNetworkList()){
            System.out.println(network.getEnterpriseDirectory());
            for(Enterprise ent:network.getEnterpriseDirectory().getEnterpriseList()){
                if(ent.getName().equals(superMarketEnterprise.getName())){
                    net = network;
                }
        }
        }
        order.setNetworkName(net.getName());
        order.setSender(account);
        order.setSenderEnterprise(superMarketEnterprise);
        order.setReceiverEnterprise(distributorenterprise);
        order.setStatus("waiting for distributor to accept");
        populateProductList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderProductList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProductList = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1680, 1050));
        setSize(new java.awt.Dimension(1680, 1050));
        setLayout(null);

        tblOrderProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Description", "Price", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(tblOrderProductList);

        add(jScrollPane1);
        jScrollPane1.setBounds(133, 445, 678, 192);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Products List");
        add(jLabel1);
        jLabel1.setBounds(371, 58, 112, 22);
        add(txtSearch);
        txtSearch.setBounds(284, 110, 126, 26);

        btnSearch.setText("Search Product");
        add(btnSearch);
        btnSearch.setBounds(446, 110, 137, 29);

        tblProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Description", "Price", "Quantity"
            }
        ));
        jScrollPane2.setViewportView(tblProductList);

        add(jScrollPane2);
        jScrollPane2.setBounds(133, 195, 678, 192);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Order List");
        add(jLabel2);
        jLabel2.setBounds(387, 405, 86, 22);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove);
        btnRemove.setBounds(829, 517, 93, 29);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd);
        btnAdd.setBounds(829, 271, 93, 29);

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(18, 23, 93, 29);

        jButton1.setText("Payment Page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(470, 680, 130, 29);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh);
        btnRefresh.setBounds(720, 23, 91, 29);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/supermarket.jpeg"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4);
        jLabel4.setBounds(10, 0, 1210, 650);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblProductList.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select an item");
            return;
        }
        boolean check = true;
        if(((Product)tblProductList.getValueAt(selectedRow, 0)).getQuantity()==0){
            JOptionPane.showMessageDialog(this, "Item not available");
            return;
        }
        for(Product product:order.getProductList()){
            if(product.getName()== ((Product)tblProductList.getValueAt(selectedRow, 0)).getName()){
                product.addQuantity();
                check = false;
            }
        }
        if(check){
           Product product = new Product(((Product)tblProductList.getValueAt(selectedRow, 0)).getName(),((Product)tblProductList.getValueAt(selectedRow, 0)).getDescription());
           product.setDistributorPrice(((Product)tblProductList.getValueAt(selectedRow, 0)).getDistributorPrice());
           product.setSuperMarketPrice(product.getDistributorPrice());
           order.getProductList().add(product);
        }
        ((Product)tblProductList.getValueAt(selectedRow, 0)).reduceQuantity();
        populateProductList();
        populateOrder();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrderProductList.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select an item");
            return;
        }
        boolean check = true;
        order.getProductList().remove((Product)tblOrderProductList.getValueAt(selectedRow, 0));
        for(Product product:distributorEnterprise.getProductList()){
            if(product.getName()== ((Product)tblOrderProductList.getValueAt(selectedRow, 0)).getName()){
                product.setQuantity(product.getQuantity()+((Product)tblOrderProductList.getValueAt(selectedRow, 0)).getQuantity());
                check = false;
            }
        }
        populateOrder();
        populateProductList();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(order.getProductList().size()!=0){
            SuperMarketAdminDetails salesPersonTransactionHome= new SuperMarketAdminDetails(userProcessContainer,order, distributorEnterprise, ecoSystem);
            userProcessContainer.add("processWorkRequestJPanel", salesPersonTransactionHome);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(this, "please add items to the cart");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        Order newOrder = new Order();
        newOrder.setNetworkName(order.getNetworkName());
        newOrder.setSender(order.getSender());
        newOrder.setSenderEnterprise(order.getSenderEnterprise());
        newOrder.setReceiverEnterprise(order.getReceiverEnterprise());
        newOrder.setStatus("waiting for distributor to accept");
        for(Product prod:order.getProductList()){
            newOrder.getProductList().add(prod);
        }
        distributorEnterprise.restoreProducts(newOrder);
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SelectDistributorJPanel dwjp = (SelectDistributorJPanel) component;
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateProductList();
        populateOrder();
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblOrderProductList;
    private javax.swing.JTable tblProductList;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public void populateProductList() {
        DefaultTableModel model = (DefaultTableModel) tblProductList.getModel();
        
        model.setRowCount(0);
        for(Product product:distributorEnterprise.getProductList()){
            Object[] row = new Object[5];
            row[0] = product;
            row[1] = product.getName();
            row[2] = product.getDescription();
            row[3] = product.getDistributorPrice();
            row[4] = product.getQuantity();
            model.addRow(row);
        }
    }
    
    public void populateSearchProductList(){
        DefaultTableModel model = (DefaultTableModel) tblProductList.getModel();
        model.setRowCount(0);
        for(Product product:distributorEnterprise.getProductList()){
            if(product.getName().equals(txtSearch.getText()) || txtSearch.getText().equals("")){
                Object[] row = new Object[5];
                row[0] = product;
                row[1] = product.getName();
                row[2] = product.getDescription();
                row[3] = product.getDistributorPrice();
                row[4] = product.getQuantity();
                model.addRow(row);
            }
            
        }
    }

    public void populateOrder() {
        DefaultTableModel model = (DefaultTableModel) tblOrderProductList.getModel();
        model.setRowCount(0);
        for(Product product:order.getProductList()){
            Object[] row = new Object[5];
            row[0] = product;
            row[1] = product.getName();
            row[2] = product.getDescription();
            row[3] = product.getDistributorPrice();
            row[4] = product.getQuantity();
            model.addRow(row);
        }
    }
}
